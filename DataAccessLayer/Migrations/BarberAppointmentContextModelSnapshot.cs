// <auto-generated />
using System;
using BarberAppointment.DataAccessLayer.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(BarberAppointmentContext))]
    partial class BarberAppointmentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BarberId")
                        .HasColumnType("int");

                    b.Property<bool?>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSalonRatedByTheUser")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BarberId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Barber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RatersCount")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Barbers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Zeytinburnu",
                            CityId = 2,
                            CreatedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4129),
                            DeletedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4143),
                            ImageUrl = "../images/Barbers/ManSalon.jfif",
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4140),
                            Name = "Erkek Kuaför 1",
                            RatersCount = 0,
                            Rating = 0.0
                        },
                        new
                        {
                            Id = 2,
                            Address = "Keçiören",
                            CityId = 1,
                            CreatedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4147),
                            DeletedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4148),
                            ImageUrl = "../images/Barbers/ManSalon.jfif",
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4147),
                            Name = "Erkek Kuaför 2",
                            RatersCount = 0,
                            Rating = 0.0
                        },
                        new
                        {
                            Id = 3,
                            Address = "Zeytinburnu",
                            CityId = 2,
                            CreatedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4151),
                            DeletedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4152),
                            ImageUrl = "../images/Barbers/ManSalon.jfif",
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4151),
                            Name = "Erkek Kuaför 3",
                            RatersCount = 0,
                            Rating = 0.0
                        },
                        new
                        {
                            Id = 4,
                            Address = "Keçiören",
                            CityId = 1,
                            CreatedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4154),
                            DeletedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4156),
                            ImageUrl = "../images/Barbers/ManSalon.jfif",
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4155),
                            Name = "Erkek Kuaför 4",
                            RatersCount = 0,
                            Rating = 0.0
                        },
                        new
                        {
                            Id = 5,
                            Address = "Zeytinburnu",
                            CityId = 2,
                            CreatedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4159),
                            DeletedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4161),
                            ImageUrl = "../images/Barbers/ManSalon.jfif",
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4160),
                            Name = "Erkek Kuaför 5",
                            RatersCount = 0,
                            Rating = 0.0
                        },
                        new
                        {
                            Id = 6,
                            Address = "Çankaya",
                            CityId = 1,
                            CreatedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4163),
                            DeletedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4164),
                            ImageUrl = "../images/Barbers/ManSalon.jfif",
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4163),
                            Name = "Erkek Kuaför 6",
                            RatersCount = 0,
                            Rating = 0.0
                        },
                        new
                        {
                            Id = 7,
                            Address = "Bağcılar",
                            CityId = 2,
                            CreatedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4166),
                            DeletedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4167),
                            ImageUrl = "../images/Barbers/ManSalon.jfif",
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4166),
                            Name = "Erkek Kuaför 7",
                            RatersCount = 0,
                            Rating = 0.0
                        },
                        new
                        {
                            Id = 8,
                            Address = "Pursaklar",
                            CityId = 1,
                            CreatedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4169),
                            DeletedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4171),
                            ImageUrl = "../images/Barbers/ManSalon.jfif",
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4170),
                            Name = "Erkek Kuaför 8",
                            RatersCount = 0,
                            Rating = 0.0
                        },
                        new
                        {
                            Id = 9,
                            Address = "Bakırköy",
                            CityId = 2,
                            CreatedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4173),
                            DeletedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4174),
                            ImageUrl = "../images/Barbers/ManSalon.jfif",
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4173),
                            Name = "Erkek Kuaför 9",
                            RatersCount = 0,
                            Rating = 0.0
                        },
                        new
                        {
                            Id = 10,
                            Address = "Gölbaşı",
                            CityId = 1,
                            CreatedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4176),
                            DeletedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4177),
                            ImageUrl = "../images/Barbers/ManSalon.jfif",
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4177),
                            Name = "Erkek Kuaför 10",
                            RatersCount = 0,
                            Rating = 0.0
                        },
                        new
                        {
                            Id = 11,
                            Address = "Fatih",
                            CityId = 2,
                            CreatedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4179),
                            DeletedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4181),
                            ImageUrl = "../images/Barbers/ManSalon.jfif",
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(4180),
                            Name = "Erkek Kuaför 11",
                            RatersCount = 0,
                            Rating = 0.0
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(6140),
                            DeletedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(6147),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(6145),
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(6150),
                            DeletedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(6151),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2023, 3, 24, 0, 18, 37, 334, DateTimeKind.Local).AddTicks(6150),
                            Name = "İstanbul"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a6748beb-5f94-46ac-8e7f-5c098d72713f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79f51b71-9d47-44ca-9f81-2385a1a2a349",
                            CreatedOn = new DateTime(2023, 3, 24, 0, 18, 37, 336, DateTimeKind.Local).AddTicks(6715),
                            DeletedOn = new DateTime(2023, 3, 24, 0, 18, 37, 336, DateTimeKind.Local).AddTicks(6719),
                            Email = "user1@user.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            LockoutEnd = new DateTimeOffset(new DateTime(2023, 3, 23, 21, 18, 37, 336, DateTimeKind.Unspecified).AddTicks(6704), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedOn = new DateTime(2023, 3, 24, 0, 18, 37, 336, DateTimeKind.Local).AddTicks(6718),
                            NormalizedEmail = "USER1@USER.COM",
                            NormalizedUserName = "USER1@USER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMaoOZ8SoMuvqqffZ88eiVhkYuk5mf9b2D0gTD3271JwgmEoH3Tkwz7xCSdwLNvYmg==",
                            PhoneNumber = "+905554443322",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d2b3b9f-5717-492c-8c99-65acab95e956",
                            TwoFactorEnabled = false,
                            UserName = "user1@user.com"
                        },
                        new
                        {
                            Id = "945e695c-63f5-4554-ba69-163040cbb16a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bbe71cbd-9449-4b93-b5b9-dc2d8a1865d4",
                            CreatedOn = new DateTime(2023, 3, 24, 0, 18, 37, 430, DateTimeKind.Local).AddTicks(776),
                            DeletedOn = new DateTime(2023, 3, 24, 0, 18, 37, 430, DateTimeKind.Local).AddTicks(790),
                            Email = "user2@user.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            LockoutEnd = new DateTimeOffset(new DateTime(2023, 3, 23, 21, 18, 37, 430, DateTimeKind.Unspecified).AddTicks(766), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedOn = new DateTime(2023, 3, 24, 0, 18, 37, 430, DateTimeKind.Local).AddTicks(787),
                            NormalizedEmail = "USER1@USER.COM",
                            NormalizedUserName = "USER2@USER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL9rTWSe2rWfoecwFiSdqqbdrxFABHIdGLtclt1a2IiMSYog0yfShOvdMSjMDAF/vg==",
                            PhoneNumber = "+905554443322",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "787a7048-d8ea-41f1-8480-6a82109b8aca",
                            TwoFactorEnabled = false,
                            UserName = "user2@user.com"
                        },
                        new
                        {
                            Id = "e26796d3-0f85-48fe-a864-4f523107c3bb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9fd559a-87b4-49b9-8674-95d9f618b83c",
                            CreatedOn = new DateTime(2023, 3, 24, 0, 18, 37, 522, DateTimeKind.Local).AddTicks(4961),
                            DeletedOn = new DateTime(2023, 3, 24, 0, 18, 37, 522, DateTimeKind.Local).AddTicks(4973),
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = true,
                            LockoutEnd = new DateTimeOffset(new DateTime(2023, 3, 23, 21, 18, 37, 522, DateTimeKind.Unspecified).AddTicks(4923), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedOn = new DateTime(2023, 3, 24, 0, 18, 37, 522, DateTimeKind.Local).AddTicks(4970),
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ9EFaI1kwRX+Sb3sGuQtyPe4/J280RsKQ1nHcHIbq/PVNHz3Fueq5eGhh0oifmh0g==",
                            PhoneNumber = "+905554443322",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63604666-6af5-4892-8c1c-7e0628fd52f5",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "35ca7aad-d2b3-49f4-ad0c-1fdbc2ed7ed8",
                            ConcurrencyStamp = "77b88ce9-3ae7-4dea-8f85-a0a777617006",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            CreatedOn = new DateTime(2023, 3, 24, 0, 18, 37, 335, DateTimeKind.Local).AddTicks(9569),
                            DeletedOn = new DateTime(2023, 3, 24, 0, 18, 37, 335, DateTimeKind.Local).AddTicks(9579),
                            IsDeleted = false,
                            ModifiedOn = new DateTime(2023, 3, 24, 0, 18, 37, 335, DateTimeKind.Local).AddTicks(9576)
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasDiscriminator().HasValue("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = "e26796d3-0f85-48fe-a864-4f523107c3bb",
                            RoleId = "35ca7aad-d2b3-49f4-ad0c-1fdbc2ed7ed8"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Appointment", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Barber", "Barber")
                        .WithMany("Appointments")
                        .HasForeignKey("BarberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Barber");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Barber", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.City", "City")
                        .WithMany("Barbers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", "User")
                        .WithMany("Barbers")
                        .HasForeignKey("UserId");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Barber", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.City", b =>
                {
                    b.Navigation("Barbers");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Barbers");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
